#define	MASKA34		0x0FFFFFl
#define VAR_A   0
#define VAR_B   1

unsigned long registr1,registr2;
BYTE next1,next2,rez[12],rez1[12],rez2[12];

int decode34(BYTE *buf_inp, BYTE *buf_out, unsigned int len,BYTE Variant,BYTE Num)
{
BYTE	mask_bit[8]={0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
static unsigned char	tab[256]={
0x00, 0x02, 0x01, 0x03, 0x08, 0x0a, 0x09, 0x0b, 0x04, 0x06, 0x05, 0x07, 
0x0c, 0x0e, 0x0d, 0x0f, 0x20, 0x22, 0x21, 0x23, 0x28, 0x2a, 0x29, 0x2b, 
0x24, 0x26, 0x25, 0x27, 0x2c, 0x2e, 0x2d, 0x2f, 0x10, 0x12, 0x11, 0x13, 
0x18, 0x1a, 0x19, 0x1b, 0x14, 0x16, 0x15, 0x17, 0x1c, 0x1e, 0x1d, 0x1f, 
0x30, 0x32, 0x31, 0x33, 0x38, 0x3a, 0x39, 0x3b, 0x34, 0x36, 0x35, 0x37, 
0x3c, 0x3e, 0x3d, 0x3f, 0x80, 0x82, 0x81, 0x83, 0x88, 0x8a, 0x89, 0x8b, 
0x84, 0x86, 0x85, 0x87, 0x8c, 0x8e, 0x8d, 0x8f, 0xa0, 0xa2, 0xa1, 0xa3, 
0xa8, 0xaa, 0xa9, 0xab, 0xa4, 0xa6, 0xa5, 0xa7, 0xac, 0xae, 0xad, 0xaf, 
0x90, 0x92, 0x91, 0x93, 0x98, 0x9a, 0x99, 0x9b, 0x94, 0x96, 0x95, 0x97, 
0x9c, 0x9e, 0x9d, 0x9f, 0xb0, 0xb2, 0xb1, 0xb3, 0xb8, 0xba, 0xb9, 0xbb, 
0xb4, 0xb6, 0xb5, 0xb7, 0xbc, 0xbe, 0xbd, 0xbf, 0x40, 0x42, 0x41, 0x43, 
0x48, 0x4a, 0x49, 0x4b, 0x44, 0x46, 0x45, 0x47, 0x4c, 0x4e, 0x4d, 0x4f, 
0x60, 0x62, 0x61, 0x63, 0x68, 0x6a, 0x69, 0x6b, 0x64, 0x66, 0x65, 0x67, 
0x6c, 0x6e, 0x6d, 0x6f, 0x50, 0x52, 0x51, 0x53, 0x58, 0x5a, 0x59, 0x5b, 
0x54, 0x56, 0x55, 0x57, 0x5c, 0x5e, 0x5d, 0x5f, 0x70, 0x72, 0x71, 0x73, 
0x78, 0x7a, 0x79, 0x7b, 0x74, 0x76, 0x75, 0x77, 0x7c, 0x7e, 0x7d, 0x7f, 
0xc0, 0xc2, 0xc1, 0xc3, 0xc8, 0xca, 0xc9, 0xcb, 0xc4, 0xc6, 0xc5, 0xc7,
0xcc, 0xce, 0xcd, 0xcf, 0xe0, 0xe2, 0xe1, 0xe3, 0xe8, 0xea, 0xe9, 0xeb,
0xe4, 0xe6, 0xe5, 0xe7, 0xec, 0xee, 0xed, 0xef, 0xd0, 0xd2, 0xd1, 0xd3,
0xd8, 0xda, 0xd9, 0xdb, 0xd4, 0xd6, 0xd5, 0xd7, 0xdc, 0xde, 0xdd, 0xdf,
0xf0, 0xf2, 0xf1, 0xf3, 0xf8, 0xfa, 0xf9, 0xfb, 0xf4, 0xf6, 0xf5, 0xf7,
0xfc, 0xfe, 0xfd, 0xff};
static unsigned long
		mask1[13]={0x04l, 0x08l, 0x10l, 0x20l, 0x80l, 0x200l, 0x800l, 0x1000l, 0x2000l, 0x8000l, 0x10000l, 0x20000l, 0x80000l},
		mask2[13]={0x04l, 0x08l, 0x10l, 0x20l, 0x40l, 0x100l, 0x1000l, 0x40000l, 0x80000l, 0l, 0l, 0l, 0l},
		mask3[13]={0x40l, 0x80l, 0x100l, 0x200l, 0x400l, 0x1000l, 0x10000l, 0l, 0l, 0l, 0l, 0l, 0l};
unsigned int	i,
		j,
		k,
		m=0;
unsigned char	temp[32],
        variant,next=0;
unsigned long	registr=0;
   
   if (Num==0) {
		next=next1;
		registr=registr1;
		memcpy(rez, rez1, 12);
   }
   if (Num==1) {
		next=next2;
		registr=registr2;
		memcpy(rez, rez2, 12);
   }

    variant=Variant;
	if (variant==VAR_B) {
		for (i=0; i<len; i++)
			buf_out[i]=tab[buf_inp[i]&0xFF];
		memcpy(buf_inp, buf_out, len);											
	}
	memset(buf_out, 0, len);
	for (i=0; i<len; i++) 
	{
		for (j=0; j<8; j++)
			(buf_inp[i]&mask_bit[j])?(temp[j]=1):(temp[j]=0);
		for (j=0; j<8; j+=4, next+=3) {
			for (k=0; k<4; k++)
				registr=(((registr<<1)&MASKA34)|temp[j+k]);
			for (k=0; k<13; k++) {
				if (registr&mask1[k])
					rez[next]^=1;
				if (registr&mask2[k])
					rez[next+1]^=1;
				if (registr&mask3[k])
					rez[next+2]^=1;
			}
		}
		if (next>=8) {
			for (j=0; j<8; j++)
				if (rez[j])
					buf_out[m]|=mask_bit[j];
			++m;
			if ( (next-=8)!=0 )
				memcpy(rez, &(rez[8]), next);
			memset(&(rez[next]), 0, 12-next);
		}
	}
	if (Num==0) {
		next1=next;
		registr1=registr;
		memcpy(rez1, rez, 12);
	}
	else {
		next2=next;
		registr2=registr;
		memcpy(rez2, rez, 12);
	}
 return m;
}






